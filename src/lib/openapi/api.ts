/* tslint:disable */
/* eslint-disable */
/**
 * Turnip React API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiJobTrackerSessionsSessionIdPostingsGetRequest
 */
export interface ApiJobTrackerSessionsSessionIdPostingsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiJobTrackerSessionsSessionIdPostingsGetRequest
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiJobTrackerSessionsSessionIdPostingsGetRequest
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiJobTrackerSessionsSessionIdPostingsGetRequest
     */
    'jobTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiJobTrackerSessionsSessionIdPostingsGetRequest
     */
    'jobLink'?: string;
}
/**
 * 
 * @export
 * @interface ApiJobTrackerUsersUserIdSessionsGetRequest
 */
export interface ApiJobTrackerUsersUserIdSessionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiJobTrackerUsersUserIdSessionsGetRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ApiLoginPostRequest
 */
export interface ApiLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface JobEvent
 */
export interface JobEvent {
    /**
     * 
     * @type {string}
     * @memberof JobEvent
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof JobEvent
     */
    'anonymizedNotes'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobEvent
     */
    'publicNotes'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobEvent
     */
    'eventDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobEvent
     */
    'jobPostingId'?: string;
}
/**
 * 
 * @export
 * @interface JobPosting
 */
export interface JobPosting {
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'jobTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'jobLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'resumeLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'sessionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobPosting
     */
    'userId'?: string;
    /**
     * 
     * @type {Array<JobEvent>}
     * @memberof JobPosting
     */
    'events'?: Array<JobEvent>;
}
/**
 * 
 * @export
 * @interface JobSession
 */
export interface JobSession {
    /**
     * 
     * @type {string}
     * @memberof JobSession
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof JobSession
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof JobSession
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof JobSession
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof JobSession
     */
    'endDate': string;
    /**
     * 
     * @type {boolean}
     * @memberof JobSession
     */
    'isPublic': boolean;
    /**
     * 
     * @type {Array<JobPosting>}
     * @memberof JobSession
     */
    'jobPostings'?: Array<JobPosting>;
}
/**
 * 
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'id': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete job posting
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdDelete: async (eventId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiJobTrackerEventsEventIdDelete', 'eventId', eventId)
            const localVarPath = `/api/job-tracker/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get job event
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdGet: async (eventId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiJobTrackerEventsEventIdGet', 'eventId', eventId)
            const localVarPath = `/api/job-tracker/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update job event
         * @param {string} eventId The job event ID
         * @param {JobEvent} jobEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdPut: async (eventId: string, jobEvent: JobEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiJobTrackerEventsEventIdPut', 'eventId', eventId)
            // verify required parameter 'jobEvent' is not null or undefined
            assertParamExists('apiJobTrackerEventsEventIdPut', 'jobEvent', jobEvent)
            const localVarPath = `/api/job-tracker/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdDelete: async (postingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdDelete', 'postingId', postingId)
            const localVarPath = `/api/job-tracker/postings/{postingId}`
                .replace(`{${"postingId"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all job events for the posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdEventsGet: async (postingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdEventsGet', 'postingId', postingId)
            const localVarPath = `/api/job-tracker/postings/{postingId}/events`
                .replace(`{${"postingId"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new job event
         * @param {string} postingId The job posting ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdEventsPost: async (postingId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdEventsPost', 'postingId', postingId)
            // verify required parameter 'apiJobTrackerUsersUserIdSessionsGetRequest' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdEventsPost', 'apiJobTrackerUsersUserIdSessionsGetRequest', apiJobTrackerUsersUserIdSessionsGetRequest)
            const localVarPath = `/api/job-tracker/postings/{postingId}/events`
                .replace(`{${"postingId"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiJobTrackerUsersUserIdSessionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdGet: async (postingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdGet', 'postingId', postingId)
            const localVarPath = `/api/job-tracker/postings/{postingId}`
                .replace(`{${"postingId"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update job posting
         * @param {string} postingId The job posting ID
         * @param {JobPosting} jobPosting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdPut: async (postingId: string, jobPosting: JobPosting, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postingId' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdPut', 'postingId', postingId)
            // verify required parameter 'jobPosting' is not null or undefined
            assertParamExists('apiJobTrackerPostingsPostingIdPut', 'jobPosting', jobPosting)
            const localVarPath = `/api/job-tracker/postings/{postingId}`
                .replace(`{${"postingId"}}`, encodeURIComponent(String(postingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobPosting, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdDelete: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdDelete', 'sessionId', sessionId)
            const localVarPath = `/api/job-tracker/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdGet: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdGet', 'sessionId', sessionId)
            const localVarPath = `/api/job-tracker/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all job postings for the session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPostingsGet: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdPostingsGet', 'sessionId', sessionId)
            const localVarPath = `/api/job-tracker/sessions/{sessionId}/postings`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new job posting
         * @param {string} sessionId The session ID
         * @param {ApiJobTrackerSessionsSessionIdPostingsGetRequest} apiJobTrackerSessionsSessionIdPostingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPostingsPost: async (sessionId: string, apiJobTrackerSessionsSessionIdPostingsGetRequest: ApiJobTrackerSessionsSessionIdPostingsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdPostingsPost', 'sessionId', sessionId)
            // verify required parameter 'apiJobTrackerSessionsSessionIdPostingsGetRequest' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdPostingsPost', 'apiJobTrackerSessionsSessionIdPostingsGetRequest', apiJobTrackerSessionsSessionIdPostingsGetRequest)
            const localVarPath = `/api/job-tracker/sessions/{sessionId}/postings`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiJobTrackerSessionsSessionIdPostingsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update job session
         * @param {string} sessionId The session ID
         * @param {JobSession} jobSession 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPut: async (sessionId: string, jobSession: JobSession, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdPut', 'sessionId', sessionId)
            // verify required parameter 'jobSession' is not null or undefined
            assertParamExists('apiJobTrackerSessionsSessionIdPut', 'jobSession', jobSession)
            const localVarPath = `/api/job-tracker/sessions/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobSession, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all job sessions for the user
         * @param {string} userId The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerUsersUserIdSessionsGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiJobTrackerUsersUserIdSessionsGet', 'userId', userId)
            const localVarPath = `/api/job-tracker/users/{userId}/sessions`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new job session
         * @param {string} userId The user ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerUsersUserIdSessionsPost: async (userId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiJobTrackerUsersUserIdSessionsPost', 'userId', userId)
            // verify required parameter 'apiJobTrackerUsersUserIdSessionsGetRequest' is not null or undefined
            assertParamExists('apiJobTrackerUsersUserIdSessionsPost', 'apiJobTrackerUsersUserIdSessionsGetRequest', apiJobTrackerUsersUserIdSessionsGetRequest)
            const localVarPath = `/api/job-tracker/users/{userId}/sessions`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiJobTrackerUsersUserIdSessionsGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login as a users to be able to do more things in the website
         * @param {ApiLoginPostRequest} apiLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost: async (apiLoginPostRequest: ApiLoginPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiLoginPostRequest' is not null or undefined
            assertParamExists('apiLoginPost', 'apiLoginPostRequest', apiLoginPostRequest)
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete job posting
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerEventsEventIdDelete(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerEventsEventIdDelete(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get job event
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerEventsEventIdGet(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobEvent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerEventsEventIdGet(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update job event
         * @param {string} eventId The job event ID
         * @param {JobEvent} jobEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerEventsEventIdPut(eventId: string, jobEvent: JobEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerEventsEventIdPut(eventId, jobEvent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerPostingsPostingIdDelete(postingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerPostingsPostingIdDelete(postingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all job events for the posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerPostingsPostingIdEventsGet(postingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobEvent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerPostingsPostingIdEventsGet(postingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new job event
         * @param {string} postingId The job posting ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerPostingsPostingIdEventsPost(postingId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerPostingsPostingIdEventsPost(postingId, apiJobTrackerUsersUserIdSessionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerPostingsPostingIdGet(postingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerPostingsPostingIdGet(postingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update job posting
         * @param {string} postingId The job posting ID
         * @param {JobPosting} jobPosting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerPostingsPostingIdPut(postingId: string, jobPosting: JobPosting, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerPostingsPostingIdPut(postingId, jobPosting, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerSessionsSessionIdDelete(sessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerSessionsSessionIdDelete(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerSessionsSessionIdGet(sessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerSessionsSessionIdGet(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all job postings for the session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerSessionsSessionIdPostingsGet(sessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobSession>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerSessionsSessionIdPostingsGet(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new job posting
         * @param {string} sessionId The session ID
         * @param {ApiJobTrackerSessionsSessionIdPostingsGetRequest} apiJobTrackerSessionsSessionIdPostingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerSessionsSessionIdPostingsPost(sessionId: string, apiJobTrackerSessionsSessionIdPostingsGetRequest: ApiJobTrackerSessionsSessionIdPostingsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerSessionsSessionIdPostingsPost(sessionId, apiJobTrackerSessionsSessionIdPostingsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update job session
         * @param {string} sessionId The session ID
         * @param {JobSession} jobSession 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerSessionsSessionIdPut(sessionId: string, jobSession: JobSession, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerSessionsSessionIdPut(sessionId, jobSession, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all job sessions for the user
         * @param {string} userId The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerUsersUserIdSessionsGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobSession>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerUsersUserIdSessionsGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new job session
         * @param {string} userId The user ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobTrackerUsersUserIdSessionsPost(userId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobTrackerUsersUserIdSessionsPost(userId, apiJobTrackerUsersUserIdSessionsGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login as a users to be able to do more things in the website
         * @param {ApiLoginPostRequest} apiLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginPost(apiLoginPostRequest: ApiLoginPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginPost(apiLoginPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete job posting
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdDelete(eventId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobTrackerEventsEventIdDelete(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get job event
         * @param {string} eventId The job event ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdGet(eventId: string, options?: any): AxiosPromise<Array<JobEvent>> {
            return localVarFp.apiJobTrackerEventsEventIdGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update job event
         * @param {string} eventId The job event ID
         * @param {JobEvent} jobEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerEventsEventIdPut(eventId: string, jobEvent: JobEvent, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.apiJobTrackerEventsEventIdPut(eventId, jobEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdDelete(postingId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobTrackerPostingsPostingIdDelete(postingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all job events for the posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdEventsGet(postingId: string, options?: any): AxiosPromise<Array<JobEvent>> {
            return localVarFp.apiJobTrackerPostingsPostingIdEventsGet(postingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new job event
         * @param {string} postingId The job posting ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdEventsPost(postingId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: any): AxiosPromise<JobEvent> {
            return localVarFp.apiJobTrackerPostingsPostingIdEventsPost(postingId, apiJobTrackerUsersUserIdSessionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get job posting
         * @param {string} postingId The job posting ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdGet(postingId: string, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.apiJobTrackerPostingsPostingIdGet(postingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update job posting
         * @param {string} postingId The job posting ID
         * @param {JobPosting} jobPosting 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerPostingsPostingIdPut(postingId: string, jobPosting: JobPosting, options?: any): AxiosPromise<Array<JobPosting>> {
            return localVarFp.apiJobTrackerPostingsPostingIdPut(postingId, jobPosting, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdDelete(sessionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobTrackerSessionsSessionIdDelete(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get job session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdGet(sessionId: string, options?: any): AxiosPromise<JobSession> {
            return localVarFp.apiJobTrackerSessionsSessionIdGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all job postings for the session
         * @param {string} sessionId The session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPostingsGet(sessionId: string, options?: any): AxiosPromise<Array<JobSession>> {
            return localVarFp.apiJobTrackerSessionsSessionIdPostingsGet(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new job posting
         * @param {string} sessionId The session ID
         * @param {ApiJobTrackerSessionsSessionIdPostingsGetRequest} apiJobTrackerSessionsSessionIdPostingsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPostingsPost(sessionId: string, apiJobTrackerSessionsSessionIdPostingsGetRequest: ApiJobTrackerSessionsSessionIdPostingsGetRequest, options?: any): AxiosPromise<JobSession> {
            return localVarFp.apiJobTrackerSessionsSessionIdPostingsPost(sessionId, apiJobTrackerSessionsSessionIdPostingsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update job session
         * @param {string} sessionId The session ID
         * @param {JobSession} jobSession 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerSessionsSessionIdPut(sessionId: string, jobSession: JobSession, options?: any): AxiosPromise<JobSession> {
            return localVarFp.apiJobTrackerSessionsSessionIdPut(sessionId, jobSession, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all job sessions for the user
         * @param {string} userId The user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerUsersUserIdSessionsGet(userId: string, options?: any): AxiosPromise<Array<JobSession>> {
            return localVarFp.apiJobTrackerUsersUserIdSessionsGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new job session
         * @param {string} userId The user ID
         * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobTrackerUsersUserIdSessionsPost(userId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: any): AxiosPromise<JobSession> {
            return localVarFp.apiJobTrackerUsersUserIdSessionsPost(userId, apiJobTrackerUsersUserIdSessionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login as a users to be able to do more things in the website
         * @param {ApiLoginPostRequest} apiLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost(apiLoginPostRequest: ApiLoginPostRequest, options?: any): AxiosPromise<PublicUser> {
            return localVarFp.apiLoginPost(apiLoginPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete job posting
     * @param {string} eventId The job event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerEventsEventIdDelete(eventId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerEventsEventIdDelete(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get job event
     * @param {string} eventId The job event ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerEventsEventIdGet(eventId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerEventsEventIdGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update job event
     * @param {string} eventId The job event ID
     * @param {JobEvent} jobEvent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerEventsEventIdPut(eventId: string, jobEvent: JobEvent, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerEventsEventIdPut(eventId, jobEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete job posting
     * @param {string} postingId The job posting ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerPostingsPostingIdDelete(postingId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerPostingsPostingIdDelete(postingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all job events for the posting
     * @param {string} postingId The job posting ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerPostingsPostingIdEventsGet(postingId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerPostingsPostingIdEventsGet(postingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new job event
     * @param {string} postingId The job posting ID
     * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerPostingsPostingIdEventsPost(postingId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerPostingsPostingIdEventsPost(postingId, apiJobTrackerUsersUserIdSessionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get job posting
     * @param {string} postingId The job posting ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerPostingsPostingIdGet(postingId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerPostingsPostingIdGet(postingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update job posting
     * @param {string} postingId The job posting ID
     * @param {JobPosting} jobPosting 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerPostingsPostingIdPut(postingId: string, jobPosting: JobPosting, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerPostingsPostingIdPut(postingId, jobPosting, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete job session
     * @param {string} sessionId The session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerSessionsSessionIdDelete(sessionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerSessionsSessionIdDelete(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get job session
     * @param {string} sessionId The session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerSessionsSessionIdGet(sessionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerSessionsSessionIdGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all job postings for the session
     * @param {string} sessionId The session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerSessionsSessionIdPostingsGet(sessionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerSessionsSessionIdPostingsGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new job posting
     * @param {string} sessionId The session ID
     * @param {ApiJobTrackerSessionsSessionIdPostingsGetRequest} apiJobTrackerSessionsSessionIdPostingsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerSessionsSessionIdPostingsPost(sessionId: string, apiJobTrackerSessionsSessionIdPostingsGetRequest: ApiJobTrackerSessionsSessionIdPostingsGetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerSessionsSessionIdPostingsPost(sessionId, apiJobTrackerSessionsSessionIdPostingsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update job session
     * @param {string} sessionId The session ID
     * @param {JobSession} jobSession 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerSessionsSessionIdPut(sessionId: string, jobSession: JobSession, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerSessionsSessionIdPut(sessionId, jobSession, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all job sessions for the user
     * @param {string} userId The user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerUsersUserIdSessionsGet(userId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerUsersUserIdSessionsGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new job session
     * @param {string} userId The user ID
     * @param {ApiJobTrackerUsersUserIdSessionsGetRequest} apiJobTrackerUsersUserIdSessionsGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiJobTrackerUsersUserIdSessionsPost(userId: string, apiJobTrackerUsersUserIdSessionsGetRequest: ApiJobTrackerUsersUserIdSessionsGetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiJobTrackerUsersUserIdSessionsPost(userId, apiJobTrackerUsersUserIdSessionsGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login as a users to be able to do more things in the website
     * @param {ApiLoginPostRequest} apiLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiLoginPost(apiLoginPostRequest: ApiLoginPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiLoginPost(apiLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


